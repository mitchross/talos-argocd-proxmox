apiVersion: batch/v1
kind: Job
metadata:
  name: garage-init
  namespace: garage
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        app: garage-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init
        image: alpine:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e

          # Install curl to download garage binary
          echo "Installing dependencies..."
          apk add --no-cache curl grep

          # Download garage binary
          echo "Downloading garage binary..."
          GARAGE_VERSION="v2.1.0"
          curl -L "https://garagehq.deuxfleurs.fr/_releases/${GARAGE_VERSION}/x86_64-unknown-linux-musl/garage" -o /usr/local/bin/garage
          chmod +x /usr/local/bin/garage

          echo "Garage version:"
          /usr/local/bin/garage --version

          echo "Waiting for Garage pods to start..."
          sleep 60

          echo "Connecting cluster nodes manually..."

          # Set credentials from secrets
          export GARAGE_RPC_SECRET=$(cat /etc/garage/secrets/rpc-secret)
          export GARAGE_ADMIN_TOKEN=$(cat /etc/garage/secrets/admin-token)

          echo "Discovering and connecting cluster nodes..."

          # Connect to each node individually to discover them
          # The nodes will automatically discover each other via RPC
          for i in 0 1 2; do
            echo "Discovering garage-$i..."
            export GARAGE_RPC_HOST="garage-$i.garage-internal.garage.svc.cluster.local:3901"
            /usr/local/bin/garage status 2>&1 || echo "  Node $i not yet connected"
          done

          # Use node 0 as the primary for cluster operations
          export GARAGE_RPC_HOST="garage-0.garage-internal.garage.svc.cluster.local:3901"

          sleep 5

          echo "Getting cluster status..."
          /usr/local/bin/garage status

          echo "Configuring cluster layout..."

          # Extract all node IDs from status and assign capacity
          NODE_IDS=$(/usr/local/bin/garage status 2>/dev/null | grep -oE '^[0-9a-f]{16}' || echo "")

          if [ -z "$NODE_IDS" ]; then
            echo "ERROR: No nodes found in cluster!"
            exit 1
          fi

          echo "Found nodes:"
          echo "$NODE_IDS"

          # Assign capacity to each discovered node
          echo "$NODE_IDS" | while read -r NODE_ID; do
            if [ -n "$NODE_ID" ]; then
              echo "Assigning capacity to node $NODE_ID..."
              /usr/local/bin/garage layout assign -z dc1 -c 10G "$NODE_ID" || true
            fi
          done

          echo "Applying layout..."
          /usr/local/bin/garage layout apply --version 1 || true

          echo "Cluster initialization complete"
          /usr/local/bin/garage status
        env:
        - name: GARAGE_ALLOW_WORLD_READABLE_SECRETS
          value: "true"
        volumeMounts:
        - name: secrets
          mountPath: /etc/garage/secrets
          readOnly: true
      volumes:
      - name: secrets
        secret:
          secretName: garage-secrets
