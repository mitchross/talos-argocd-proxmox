apiVersion: batch/v1
kind: Job
metadata:
  name: garage-init
  namespace: garage
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        app: garage-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init
        image: alpine:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e

          # Install curl to download garage binary
          echo "Installing dependencies..."
          apk add --no-cache curl grep

          # Download garage binary
          echo "Downloading garage binary..."
          GARAGE_VERSION="v2.1.0"
          curl -L "https://garagehq.deuxfleurs.fr/_releases/${GARAGE_VERSION}/x86_64-unknown-linux-musl/garage" -o /usr/local/bin/garage
          chmod +x /usr/local/bin/garage

          echo "Garage version:"
          /usr/local/bin/garage --version

          echo "Waiting for Garage pods to start..."
          sleep 60

          echo "Connecting cluster nodes manually..."

          # Set credentials from secrets
          export GARAGE_RPC_SECRET=$(cat /etc/garage/secrets/rpc-secret)
          export GARAGE_ADMIN_TOKEN=$(cat /etc/garage/secrets/admin-token)

          echo "Discovering garage nodes via admin API (v2)..."

          # Query each pod directly to discover all nodes
          ALL_NODE_IDS=""
          for i in 0 1 2; do
            echo "Querying garage-$i..."
            STATUS=$(curl -s -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
              http://garage-$i.garage-internal.garage.svc.cluster.local:3903/v2/GetClusterStatus)

            NODE_ID=$(echo "$STATUS" | grep -oE '"id"[[:space:]]*:[[:space:]]*"[a-f0-9]{64}"' | grep -oE '[a-f0-9]{64}' | head -1)
            if [ -n "$NODE_ID" ]; then
              echo "  Found node: $NODE_ID"
              ALL_NODE_IDS="$ALL_NODE_IDS $NODE_ID"
            fi
          done

          # Remove leading space and deduplicate
          NODE_IDS=$(echo "$ALL_NODE_IDS" | tr ' ' '\n' | grep -v '^$' | sort -u)

          if [ -z "$NODE_IDS" ]; then
            echo "ERROR: No nodes found in cluster!"
            exit 1
          fi

          NODE_COUNT=$(echo "$NODE_IDS" | wc -l)
          echo "Found $NODE_COUNT unique node(s)"

          echo "Configuring cluster layout..."

          # Build layout roles array for all nodes
          ROLES="["
          FIRST=true
          for NODE_ID in $NODE_IDS; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              ROLES="$ROLES,"
            fi
            echo "  Adding node $NODE_ID to layout (zone: dc1, capacity: 10GB)"
            ROLES="$ROLES{\"id\":\"$NODE_ID\",\"zone\":\"dc1\",\"capacity\":10000000000,\"tags\":[]}"
          done
          ROLES="$ROLES]"

          echo "Staging layout via UpdateClusterLayout..."
          LAYOUT_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"roles\":$ROLES}" \
            http://garage-admin.garage.svc.cluster.local:3903/v2/UpdateClusterLayout)
          echo "$LAYOUT_RESPONSE"

          echo "Waiting for layout staging to propagate..."
          sleep 5

          echo "Verifying staged layout..."
          VERIFY=$(curl -s -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
            http://garage-admin.garage.svc.cluster.local:3903/v2/GetClusterLayout)
          echo "$VERIFY"

          STAGED_COUNT=$(echo "$VERIFY" | grep -o "stagedRoleChanges" | wc -l)
          if [ "$STAGED_COUNT" -lt 1 ]; then
            echo "ERROR: No staged changes found!"
            exit 1
          fi

          echo "Applying cluster layout version 1..."
          APPLY_RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"version":1}' \
            http://garage-admin.garage.svc.cluster.local:3903/v2/ApplyClusterLayout)
          echo "$APPLY_RESPONSE"

          echo ""
          echo "Cluster initialization complete!"
          echo "Final cluster health:"
          curl -s -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
            http://garage-admin.garage.svc.cluster.local:3903/v2/GetClusterHealth
        env:
        - name: GARAGE_ALLOW_WORLD_READABLE_SECRETS
          value: "true"
        volumeMounts:
        - name: secrets
          mountPath: /etc/garage/secrets
          readOnly: true
      volumes:
      - name: secrets
        secret:
          secretName: garage-secrets
