apiVersion: batch/v1
kind: Job
metadata:
  name: garage-init
  namespace: garage
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/sync-wave: "1"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 5
  template:
    metadata:
      labels:
        app: garage-init
    spec:
      restartPolicy: OnFailure
      containers:
      - name: init
        image: alpine:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          set -e

          # Install curl to download garage binary
          echo "Installing dependencies..."
          apk add --no-cache curl grep

          # Download garage binary
          echo "Downloading garage binary..."
          GARAGE_VERSION="v2.1.0"
          curl -L "https://garagehq.deuxfleurs.fr/_releases/${GARAGE_VERSION}/x86_64-unknown-linux-musl/garage" -o /usr/local/bin/garage
          chmod +x /usr/local/bin/garage

          echo "Garage version:"
          /usr/local/bin/garage --version

          echo "Waiting for Garage pods to start..."
          sleep 60

          echo "Connecting cluster nodes manually..."

          # Set credentials from secrets
          export GARAGE_RPC_SECRET=$(cat /etc/garage/secrets/rpc-secret)
          export GARAGE_ADMIN_TOKEN=$(cat /etc/garage/secrets/admin-token)

          echo "Discovering garage nodes via admin API..."

          # Get cluster status from admin API
          STATUS=$(curl -s -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
            http://garage-admin.garage.svc.cluster.local:3903/v0/status)

          echo "Cluster status response:"
          echo "$STATUS"

          # Extract node IDs
          NODE_IDS=$(echo "$STATUS" | grep -o '"id":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$NODE_IDS" ]; then
            echo "ERROR: No nodes found in cluster!"
            echo "Full response: $STATUS"
            exit 1
          fi

          NODE_COUNT=$(echo "$NODE_IDS" | wc -l)
          echo "Found $NODE_COUNT node(s)"

          echo "Configuring cluster layout..."

          # Build layout configuration
          LAYOUT_UPDATES="[]"
          for NODE_ID in $NODE_IDS; do
            echo "Adding node $NODE_ID to layout (zone: dc1, capacity: 10GB)..."

            # Add node to layout via API
            curl -X PATCH -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"id\":\"$NODE_ID\",\"zone\":\"dc1\",\"capacity\":10000000000}" \
              http://garage-admin.garage.svc.cluster.local:3903/v0/layout || echo "  Failed to update node $NODE_ID"
          done

          sleep 2

          echo "Applying layout version 1..."
          curl -X POST -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"version":1}' \
            http://garage-admin.garage.svc.cluster.local:3903/v0/layout/apply || echo "  Failed to apply layout"

          echo "Cluster initialization complete!"
          echo "Final cluster status:"
          curl -s -H "Authorization: Bearer $GARAGE_ADMIN_TOKEN" \
            http://garage-admin.garage.svc.cluster.local:3903/v0/status | grep -o '"id":"[^"]*"'
        env:
        - name: GARAGE_ALLOW_WORLD_READABLE_SECRETS
          value: "true"
        volumeMounts:
        - name: secrets
          mountPath: /etc/garage/secrets
          readOnly: true
      volumes:
      - name: secrets
        secret:
          secretName: garage-secrets
