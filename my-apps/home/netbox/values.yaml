# Minimal NetBox values; using bundled PostgreSQL and Valkey for simplicity.

# Set a global pod security context to ensure pods have correct volume permissions on Talos.
# The fsGroup allows the pod's user to write to the persistent volume.
podSecurityContext:
  fsGroup: 101

allowedHosts:
- netbox.vanillax.me

# Pod affinity to ensure all NetBox pods (main app, worker, housekeeping)
# are scheduled on the same node when using ReadWriteOnce (RWO) volumes.
# This prevents Multi-Attach errors with Longhorn RWO storage.
affinity:
  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - netbox
        - key: app.kubernetes.io/component
          operator: In
          values:
          - netbox
          - worker
          - housekeeping
      topologyKey: kubernetes.io/hostname

postgresql:
  enabled: true
  # Apply security context for the PostgreSQL container as well.
  primary:
    podSecurityContext:
      fsGroup: 26 # The default user ID for postgres in the bitnami image
    persistence:
      enabled: true
      size: 10Gi
      storageClass: longhorn
  auth:
    username: netbox
    database: netbox
    password: "0sMMxAr+CtY03x5Ji9WxsuuLjnRZ8urH194x+zd3Fzg="
    # Optional but recommended to set as well
    postgresPassword: "Y3RPsv/oCRVAuzFrI979VKiizSNl+eLy/m1CyAG41Ys="

valkey:
  enabled: true
  auth:
    enabled: true
    password: "change-me"
  # Apply security context and disable persistence for both master and replicas
  master:
    podSecurityContext:
      fsGroup: 1001
    persistence:
      enabled: false
    configuration: |
      appendonly no
      save ""
  replica:
    podSecurityContext:
      fsGroup: 1001
    persistence:
      enabled: false

persistence:
  enabled: true
  storageClass: longhorn
  size: 10Gi
  # Longhorn doesn't support RWX easily, so we disable persistence for worker
  # Worker doesn't need to write media files, only read them via the API
  accessModes:
    - ReadWriteOnce

worker:
  enabled: true
  # Disable the wait-for-backend init container which causes a deadlock
  waitForBackend:
    enabled: false
  # Mount media volume as read-only to avoid Multi-Attach errors with RWO storage
  # Worker doesn't need write access to media files
  readOnlyPersistence: true
  # Pod affinity to ensure worker is scheduled on the same node as main NetBox app
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - netbox
          - key: app.kubernetes.io/component
            operator: In
            values:
            - netbox
        topologyKey: kubernetes.io/hostname

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
